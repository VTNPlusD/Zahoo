version: 2.1

orbs:
  android: circleci/android@1.0.3

references:
  cache_key: &cache_key
    key: >-
      jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "app/build.gradle.kts" }}-{{
      checksum "gradle/wrapper/gradle-wrapper.properties" }}

config_android: &config_android
  working_directory: ~/code
  docker:
    - image: circleci/android:api-30
  environment:
    GRADLE_OPTS: -Xmx4g -Dorg.gradle.daemon=false
    JVM_OPTS: -Xmx3200m

build_test: &build_test
  <<: *config_android
  steps:
    - checkout
    - run:
        name: Export environment variables
        command: >-
          echo 'export GOOGLE_SERVICES_PRD="$GOOGLE_SERVICES_PRD"' >>
          $BASH_ENV | echo 'export KEYSTORES="$KEYSTORES"' >> $BASH_ENV
    - run:
        name: Create new folders
        command: mkdir app/src/dev | mkdir app/src/prd | mkdir keystores
    - run:
        name: Decode Bas64 to file
        command: >-
          echo $GOOGLE_SERVICES_PRD | base64
          -di > app/google-services.json | echo $KEYSTORES | base64 -di
          > keystores/android-keystores
    - restore_cache:
        <<: *cache_key
    - run:
        name: Download Dependencies
        command: ./gradlew androidDependencies
    - save_cache:
        <<: *cache_key
        paths:
          - ~/.gradle/caches
          - ~/.gradle/wrapper
    - run:
        name: Run Ktlint
        command: ./gradlew ktlintCheck
    - run:
        name: Run Detekt
        command: ./gradlew detekt
    - store_artifacts:
        path: app/build/reports
        destination: reports

deploy_develop: &deploy_develop
  <<: *config_android
  steps:
    - checkout
    - run:
        name: Export environment variables
        command: >-
          echo 'export GOOGLE_SERVICES_DEV="$GOOGLE_SERVICES_DEV"' >> $BASH_ENV
          | echo 'export KEYSTORES="$KEYSTORES"' >> $BASH_ENV
    - run:
        name: Create new folders
        command: mkdir app/src/dev | mkdir app/src/prd | mkdir keystores
    - run:
        name: Decode Bas64 to file
        command: >-
          echo $GOOGLE_SERVICES_DEV | base64 -di >
          app/google-services.json  | echo $KEYSTORES | base64 -di >
          keystores/android-keystores
    - restore_cache:
        <<: *cache_key
    - run:
        name: Build App Develop
        command: ./gradlew :app:assembleDevRelease
    - run:
        name: Install Firebase CLI
        command: |
          curl -sL https://firebase.tools | bash
    - run:
        name: Upload File APK Dev to Firebase App Distribution
        command: >-
          firebase appdistribution:distribute
          app/build/outputs/apk/dev/release/app-dev-release.apk --app
          $DEV_FIREBASE_APP_ID --token $FIREBASE_TOKEN_CLI --release-notes
          "Upload APK to Firebase"

deploy_production: &deploy_production
  <<: *config_android
  steps:
    - checkout
    - run:
        name: Export environment variables
        command: >-
          echo 'export GOOGLE_SERVICES_PRD="$GOOGLE_SERVICES_PRD"' >> $BASH_ENV
          | echo 'export KEYSTORES="$KEYSTORES"' >> $BASH_ENV
    - run:
        name: Create new folders
        command: mkdir app/src/dev | mkdir app/src/prd | mkdir keystores
    - run:
        name: Decode Bas64 to file
        command: >-
          echo $GOOGLE_SERVICES_PRD | base64 -di >
          app/google-services.json  | echo $KEYSTORES | base64 -di >
          keystores/android-keystores
    - restore_cache:
        <<: *cache_key
    - run:
        name: Build App Production
        command: ./gradlew :app:assemblePrdRelease
    - run:
        name: Install Firebase CLI
        command: |
          curl -sL https://firebase.tools | bash
    - run:
        name: Upload File APK Production to Firebase App Distribution
        command: >-
          firebase appdistribution:distribute
          app/build/outputs/apk/prd/release/app-prd-release.apk --app
          $PRD_FIREBASE_APP_ID --token $FIREBASE_TOKEN_CLI --release-notes
          "Upload APK to Firebase"

jobs:
  build_test:
    <<: *build_test
  deploy_develop:
    <<: *deploy_develop
  deploy_production:
    <<: *deploy_production

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - build_test
      - deploy_develop:
          requires:
            - build_test
          filters:
            branches:
              only: main
      - deploy_production:
          requires:
            - build_test
          filters:
            branches:
              only: production
